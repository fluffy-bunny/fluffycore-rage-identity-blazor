@page "/settings/profile"

@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JS
@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject AppData AppData
@inject AppSettings AppSettings

<PageTitle>@AppSettings.AppName - @Localizer["label_profile"]</PageTitle>

<h1>@Localizer["label_profile"]</h1>


@if (!isInitialized)
{
    <p>@Localizer["message_loading"]</p>
}
else
{
<EditForm Model="@userProfile" OnValidSubmit="HandleValidSubmit">
    <p>@string.Format(Localizer["message_profile_page"], AppData.Email)</p>

    <div class="form-group mb-3">
        <div class="form-floating">
            <input placeholder="@Localizer["label_first_name"]" @ref="inputCodeElement" type="text" class="form-control" id="firstName" required @bind-value="userProfile.GivenName" readonly="@isReadOnly">
            <label for="code">@Localizer["label_first_name"]</label>
        </div>
    </div>
    <div class="form-group mb-3">
        <div class="form-floating">
            <input placeholder="@Localizer["label_last_name"]" type="text" class="form-control" id="lastName" required @bind-value="userProfile.FamilyName" readonly="@isReadOnly">
            <label for="code">@Localizer["label_last_name"]</label>
        </div>
    </div>
    <div class="form-group mb-3">
        <div class="form-floating">
            <input placeholder="@Localizer["label_phone_number"]" type="text" class="form-control" id="phoneNumber" @bind-value="userProfile.PhoneNumber" readonly="@isReadOnly">
            <label for="code">@Localizer["label_phone_number"]</label>
        </div>
    </div>
    @if (!isReadOnly)
    {
        <!-- Wizard Buttons -->
        <div class="d-flex justify-content-end mb-3 wizard-buttons">
            <div>
                <button type="button" class="btn btn-secondary me-2" @onclick="HandleCancelClick">
                    @Localizer["label_cancel"]
                </button>
                <button type="submit" class="btn btn-primary">@Localizer["label_save"]</button>
            </div>
        </div>
    }
    else
    {
        <!-- Wizard Buttons -->
        <div class="d-flex justify-content-end mb-3 wizard-buttons">
            <div>
                <button class="btn btn-primary" @onclick="ToggleEdit">@Localizer["label_edit"]</button>
            </div>
        </div>
         
    }
 
</EditForm>


    <div class="modal fade @(showSuccessModal ? "show d-block" : "")" tabindex="-1" style="display: @(showSuccessModal ? "block" : "none");" aria-labelledby="successModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content border-success">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">@Localizer["label_success"]</h5>
                </div>
                <div class="modal-body">
                    <p>@successMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ToggleSuccessModal()">@Localizer["label_close"]</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade @(showErrorModal ? "show d-block" : "")" tabindex="-1" style="display: @(showErrorModal ? "block" : "none");" aria-labelledby="errorModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content border-danger">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">@Localizer["label_error"]</h5>
                </div>
                <div class="modal-body">
                    <p>@errorMessage</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ToggleErrorModal()">@Localizer["label_close"]</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private bool isInitialized = false;

    private ElementReference inputCodeElement;
    private UserProfile userProfile = new UserProfile();

    private bool isReadOnly = true;

    private void ToggleEdit()
    {
        isReadOnly = !isReadOnly;
    }
    private async void HandleCancelClick()
    {
        Console.WriteLine("HandleCancelClick button clicked");
        isReadOnly = true;
        // bring back the original data
    }
    private async void HandleValidSubmit()
    {
        try
        {
            Console.WriteLine("submit button clicked");
            var wrappedResponse = await RageApiService.PostUserProfileAsync(userProfile);
            if (wrappedResponse?.StatusCode == HttpStatusCode.OK)
            {
                ToggleSuccessModal(Localizer["message_success_update_profile"]);
                isReadOnly = true;
            }
            else
            {
                ToggleSuccessModal(Localizer["message_error_profile_update"]);
            }
        }
        finally
        {
            // Trigger re-render
            StateHasChanged();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isInitialized)
        {
            await JS.InvokeVoidAsync("setFocus", inputCodeElement);
        }
    }
    protected override async Task OnInitializedAsync()
    {
        var wrappedResponse = await RageApiService.GetUserProfileAsync();
        var response = wrappedResponse?.Response;
        userProfile = response;
        isInitialized = true;


    }
    private string successMessage { get; set; }
    private string errorMessage { get; set; }
    private bool showSuccessModal = false;
    private bool showErrorModal = false;
    private void ToggleSuccessModal(string message = null)
    {
        successMessage = message;
        showSuccessModal = !showSuccessModal;
        if (!showSuccessModal)
        {
            // reset the success message
            successMessage = "";
        }
    }

    private void ToggleErrorModal(string message = null)
    {
        errorMessage = message;
        showErrorModal = !showErrorModal;
        if (!showErrorModal)
        {
            // reset the error message
            errorMessage = "";
        }
    }
}

