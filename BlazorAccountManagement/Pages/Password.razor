@page "/settings/password"
@using BlazorAccountManagement.Models
@using System.ComponentModel.DataAnnotations
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JS

<PageTitle>@Localizer["label_password"]</PageTitle>

<h1>@Localizer["label_password"]</h1>
@switch (state)
{
    case State.State_Unspecified:
        <EditForm Model="@userProfile" OnValidSubmit="HandleSendVerificationCodeSubmit">
            <p>@string.Format(Localizer["message_reset_password_initial"], verifyCodeModel.Email)</p>

            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-start mb-3 wizard-buttons">
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_send_verification_code"]</button>
                </div>
            </div>
        </EditForm>
        break;
    case State.State_VerifyCode:
        <EditForm Model="@userProfile" OnValidSubmit="HandleVerifyCodeSubmit">
            <p>@string.Format(Localizer["message_verify_code"], verifyCodeModel.Email)</p>

            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_enter_code"]" @ref="inputCodeElement" type="text" class="form-control" id="code" required @bind-value="verifyCodeModel.Code">
                    <label for="code">@Localizer["label_enter_code"]</label>
                </div>
            </div>

            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-start mb-3 wizard-buttons">
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_verify"]</button>
                </div>
            </div>
        </EditForm>
        break;
    case State.State_ResetPassword:
        <EditForm Model="@userProfile" OnValidSubmit="HandleResetPasswordSubmit">
            <p>@string.Format(Localizer["message_reset_password"], verifyCodeModel.Email)</p>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_password"]" @ref="inputPasswordElement" type="password" class="form-control" id="password" required @bind-value="resetPasswordModel.Password">
                    <label for="password">Enter @Localizer["label_password"]</label>
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_confirm_password"]" type="password" class="form-control" id="password_confirm" required @bind-value="resetPasswordModel.PasswordConfirm">
                    <label for="password_confirm">@Localizer["label_confirm_password"]</label>
                </div>
            </div>

            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-start mb-3 wizard-buttons">
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_save"]</button>
                </div>
            </div>

        </EditForm>
        break;
    default:
        break;
}





@code {
    enum State
    {
        State_Unspecified,
        State_VerifyCode,
        State_ResetPassword,
    }
    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; }

        public string Email { get; set; }
    }
    private VerifyCodeModel verifyCodeModel = new VerifyCodeModel()
        {
            Email = "test@test.com"
        };
    public class ResetPasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string PasswordConfirm { get; set; }

    }
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private ElementReference inputCodeElement;
    private ElementReference inputPasswordElement;

    
    private UserProfile userProfile = new UserProfile
        {
            FirstName = "John",
            LastName = "Doe"
        };
    private State state = State.State_Unspecified;

    private bool isReadOnly = true;

    private void ToggleEdit()
    {
        isReadOnly = !isReadOnly;
    }
    private async void HandleResetPasswordSubmit()
    {
        Console.WriteLine("HandleResetPasswordSubmit button clicked");
        state = State.State_Unspecified;
    }
    private async void HandleSendVerificationCodeSubmit()
    {
        Console.WriteLine("HandleSendVerificationCodeSubmit button clicked");
        state = State.State_VerifyCode;
    }
    private async void HandleVerifyCodeSubmit()
    {
        Console.WriteLine("HandleVerifyCodeSubmit button clicked");
        state = State.State_ResetPassword;
    }
    private async void HandleCancelClick()
    {
        Console.WriteLine("HandleCancelClick button clicked");
        isReadOnly = true;
        // bring back the original data
    }
    private async void HandleValidSubmit()
    {
        Console.WriteLine("submit button clicked");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        switch (state)
        {
            case State.State_VerifyCode:
                await JS.InvokeVoidAsync("setFocus", inputCodeElement);
                break;
            case State.State_ResetPassword:
                await JS.InvokeVoidAsync("setFocus", inputPasswordElement);
                break;
            default:
                break;
        }
       
    }
}
