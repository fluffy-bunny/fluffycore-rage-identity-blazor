@page "/settings/password"
@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JS
@inject AppData AppData
@inject IRageApiService RageApiService

<PageTitle>@Localizer["label_password"]</PageTitle>

<h1>@Localizer["label_password"]</h1>
@switch (state)
{
    case State.State_Unspecified:
        <EditForm Model="@userProfile" OnValidSubmit="HandleSendVerificationCodeSubmit">
            <p>@string.Format(Localizer["message_reset_password_initial"], AppData.Email)</p>

            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-start mb-3 wizard-buttons">
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_send_verification_code"]</button>
                </div>
            </div>
        </EditForm>
        break;
    case State.State_VerifyCode:
        <EditForm Model="@userProfile" OnValidSubmit="HandleVerifyCodeSubmit">
            <p>@string.Format(Localizer["message_verify_code"], AppData.Email)</p>

            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_enter_code"]" @ref="inputCodeElement" type="text" class="form-control" id="code" required @bind-value="verifyCodeModel.Code">
                    <label for="code">@Localizer["label_enter_code"]</label>
                </div>
            </div>

            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-start mb-3 wizard-buttons">
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_verify"]</button>
                </div>
            </div>
        </EditForm>
        break;
    case State.State_ResetPassword:
        <EditForm Model="@userProfile" OnValidSubmit="HandleResetPasswordSubmit">
            <p>@string.Format(Localizer["message_reset_password"], AppData.Email)</p>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_password"]" @ref="inputPasswordElement" type="password" class="form-control" id="password" required @bind-value="resetPasswordModel.Password">
                    <label for="password">Enter @Localizer["label_password"]</label>
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_confirm_password"]" type="password" class="form-control" id="password_confirm" required @bind-value="resetPasswordModel.PasswordConfirm">
                    <label for="password_confirm">@Localizer["label_confirm_password"]</label>
                </div>
            </div>

            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-start mb-3 wizard-buttons">
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_save"]</button>
                </div>
            </div>

        </EditForm>
        break;
    default:
        break;
}

<div class="modal fade @(showSuccessModal ? "show d-block" : "")" tabindex="-1" style="display: @(showSuccessModal ? "block" : "none");" aria-labelledby="successModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content border-success">
            <div class="modal-header bg-success text-white">
                <h5 class="modal-title">@Localizer["label_success"]</h5>
            </div>
            <div class="modal-body">
                <p>@successMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ToggleSuccessModal()">@Localizer["label_close"]</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade @(showErrorModal ? "show d-block" : "")" tabindex="-1" style="display: @(showErrorModal ? "block" : "none");" aria-labelledby="errorModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">@Localizer["label_error"]</h5>
            </div>
            <div class="modal-body">
                <p>@errorMessage</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="() => ToggleErrorModal()">@Localizer["label_close"]</button>
            </div>
        </div>
    </div>
</div>




@code {
    enum State
    {
        State_Unspecified,
        State_VerifyCode,
        State_ResetPassword,
    }
    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; }

        public string Email { get; set; }
    }
    private VerifyCodeModel verifyCodeModel = new VerifyCodeModel()
        {
            Email = ""
        };
    public class ResetPasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string PasswordConfirm { get; set; }

    }
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private ElementReference inputCodeElement;
    private ElementReference inputPasswordElement;


    private UserProfile userProfile = new UserProfile
        {
            GivenName = "John",
            FamilyName = "Doe"
        };
    private State state = State.State_Unspecified;

    private bool isReadOnly = true;

    private void ToggleEdit()
    {
        isReadOnly = !isReadOnly;
    }
    private string successMessage { get; set; }
    private string errorMessage { get; set; }
    private bool showSuccessModal = false;
    private bool showErrorModal = false;
    private void ToggleSuccessModal(string message = null)
    {
        successMessage = message;
        showSuccessModal = !showSuccessModal;
        if (!showSuccessModal)
        {
            // reset the success message
            successMessage = "";
        }
    }

    private void ToggleErrorModal(string message = null)
    {
        errorMessage = message;
        showErrorModal = !showErrorModal;
        if (!showErrorModal)
        {
            // reset the error message
            errorMessage = "";
        }
    }

    private async void HandleResetPasswordSubmit()
    {
        Console.WriteLine("HandleResetPasswordSubmit button clicked");
       
        var wrapperResponse = await RageApiService.PasswordResetFinishAsync(new PasswordResetFinishRequest
            {
                Password = resetPasswordModel.Password,
                PasswordConfirm = resetPasswordModel.PasswordConfirm
            });
        if (resetPasswordModel.Password != resetPasswordModel.PasswordConfirm)
        {
            // show info message
            ToggleErrorModal(Localizer["message_error_passwords_do_not_match"]);
            return;
        }
        if (wrapperResponse == null)
        {
            // show info message
            ToggleErrorModal(Localizer["message_error_password_update"]);
            return;
        }
        var statusCode = wrapperResponse.StatusCode;
        if (statusCode != HttpStatusCode.OK)
        {
            // show info message
            ToggleErrorModal(Localizer["message_error_password_update"]);
            return;
        }
        state = State.State_Unspecified;
        ToggleSuccessModal(Localizer["message_password_updated"]);
        // Trigger re-render
        StateHasChanged();
    }
    private async void HandleSendVerificationCodeSubmit()
    {
        Console.WriteLine("HandleSendVerificationCodeSubmit button clicked");
        var wrapperResponse = await RageApiService.PasswordResetStartAsync(new PasswordResetStartRequest
        {
            Email = AppData.Email
        });
        if (wrapperResponse == null)
        {
            // show info message
            ToggleErrorModal();
            return;
        }
        var response = wrapperResponse.Response;
        verifyCodeModel.Email = AppData.Email;
        verifyCodeModel.Code = response.DirectiveEmailCodeChallenge?.Code;
        state = State.State_VerifyCode;
        // Trigger re-render
        StateHasChanged();
    }
    private async void HandleVerifyCodeSubmit()
    {
        Console.WriteLine("HandleVerifyCodeSubmit button clicked");
        var wrapperResponse = await RageApiService.VerifyCodeAsync(new VerifyCodeRequest
            {
                Code = verifyCodeModel.Code
            });
        if (wrapperResponse == null)
        {
            // show info message
            ToggleErrorModal();
            return;
        }
        var statusCode = wrapperResponse.StatusCode;
        if (statusCode != HttpStatusCode.OK)
        {
            // show info message
            ToggleErrorModal();
            return;
        }
        
        state = State.State_ResetPassword;
        // Trigger re-render
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        switch (state)
        {
            case State.State_VerifyCode:
                await JS.InvokeVoidAsync("setFocus", inputCodeElement);
                break;
            case State.State_ResetPassword:
                await JS.InvokeVoidAsync("setFocus", inputPasswordElement);
                break;
            default:
                break;
        }
       
    }
 
}
