@using BlazorAccountManagement.Models
@inherits LayoutComponentBase
@inject IStringLocalizer<App> Localizer
@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject AppData AppData
@inject AppSettings AppSettings
@using BytexDigital.Blazor.Components.CookieConsent;


@if (!isInitialized)
{
    <div class="loading-overlay">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    <div class="page">
        <div class="sidebar">
            <NavMenu />
        </div>
        <main>
            <div class="top-row px-4">
                <div class="dropdown">
                    <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        @AppData.Email
                        <i class="bi bi-person-circle"></i>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                        <li><a class="dropdown-item" href="" @onclick="HandleLogoutClick">@Localizer["label_logout"]</a></li>
                    </ul>
                </div>
            </div>
            <article class="content px-4">
                @Body
            </article>
            <!-- Footer -->
            <footer class="footer mt-auto py-3 bg-light">
                <div class="container">
                    <div class="row">
                        <div class="col-12">
                            <ul class="list-inline mb-0 text-center">
                                <li class="list-inline-item">
                                    <a href="@AppSettings.PrivacyPolicyUrl" class="text-muted text-decoration-none">@Localizer["privacy_policy"]</a>
                                </li>
                                <li class="list-inline-item">•</li>
                                <li class="list-inline-item">
                                    <a href="" @onclick="HandleCookiePreference" class="text-muted text-decoration-none">@Localizer["cookie_preferences"]</a>
                                </li>
                                <li class="list-inline-item">•</li>
                                <li class="list-inline-item">
                                    <span class="text-muted">&copy; 2025 @AppSettings.AppName. @Localizer["all_rights_reserved"].</span>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </footer>
        </main>

    </div>

}

@code {
    [Inject]
    protected CookieConsentService CookieConsentService { get; set; } = null!;

    private bool isInitialized = false;


    private async Task HandleCookiePreference()
    {
        Console.WriteLine("HandleLogoutClick button clicked");
        await CookieConsentService.ShowConsentModalAsync(false);

    }
    private async Task HandleLogoutClick()
    {
        Console.WriteLine("HandleLogoutClick button clicked");
        var logoutResponse = await RageApiService.PostLogoutAsync(new LogoutRequest { });
        if (logoutResponse != null)
        {
            var response = logoutResponse.Response;
            RedirectService.RedirectToUrl(AppSettings.UnauthorizedRedirectUrl);
        }
        // bring back the original data
    }

    protected override async Task OnInitializedAsync()
    {
        var wrappedResponseIsAuthorized = await RageApiService.GetIsAuthorizedAsync();
        if (wrappedResponseIsAuthorized == null)
        {
            // will auto redirect to login page
            return;
        }

        var wrappedResponse = await RageApiService.GetUserIdentityInfoAsync();
        if (wrappedResponse == null)
        {
            // will auto redirect to login page
            return;
        }

        var response = wrappedResponse?.Response;
        AppData.Email = response?.Email;

        isInitialized = true;
        StateHasChanged();
    }
}

<style>
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }
</style>