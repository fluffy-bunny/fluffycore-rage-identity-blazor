@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS

<div class="card">
    <div class="card-header">
        Forgot Password
    </div>
    <div class="card-body">
        <p>A reset code will be sent to your email if an account exists.</p>
         <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="Email Address" @ref="inputEmailElement" type="email" class="form-control" id="email" required @bind-value="emailModel.Email">
                    <label for="email">Enter Email</label>
                </div>
            </div>
            
            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-end mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-secondary me-2" @onclick="HandleCancelClick">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">Next</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    private ElementReference inputEmailElement;

    public class EmailModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }
    private EmailModel emailModel = new EmailModel();
    protected override void OnInitialized()
    {
        emailModel.Email = Model.Email;
        Model.Directive = Directive.Directive_Unspecified;
        Model.Code = "";
    }

    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }


    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async void HandleCancelClick(){
        // Handle the cancel button click event here
        Console.WriteLine("Cancel button clicked");
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private async void HandleValidSubmit()
    {
        Model.Email = emailModel.Email;
        // Handle the next button click event here
        Console.WriteLine("HandleValidSubmit clicked");
        var request = new PasswordResetStartRequest
        {
                Email = Model.Email
        };
        var wrapper = await RageApiService.PasswordResetStartAsync(request);
        if (wrapper == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid code");
            return;
        }
        var response = wrapper.Response;

        if (response?.DirectiveEmailCodeChallenge != null)

        {

            Model.Code = response.DirectiveEmailCodeChallenge.Code;

            Model.Directive = Directive.Directive_ResetPassword;
            await SetStep.InvokeAsync(OIDCPage.VerifyCode);
            return;
        }
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputEmailElement);
        }
    }
}

