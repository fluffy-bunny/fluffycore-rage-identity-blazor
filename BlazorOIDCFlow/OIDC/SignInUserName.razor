
@inject IRageApiService RageApiService
@inject RedirectService RedirectService

<div class="card">
    <div class="card-header">
        Sign In
    </div>
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">

             <div class="form-group mb-3">
                <div class="form-floating">
                    <input type="email" class="form-control" id="email" required @bind-value="emailModel.Email">
                    <label for="email">Email address</label>
                </div>
                
            </div>
            <!-- Wizard Buttons -->

            <div class="d-flex justify-content-between mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-link" @onclick="HandleSignupClick">
                        Create Account
                    </button>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">Next</button>
                </div>
            </div>
        </EditForm>
        <!-- Separator -->
        <hr />
        <!-- Paragraph -->
        <p class="text-center">or login with a social provider</p>

        <div class="d-flex justify-content-center social-buttons">
            @if (Model?.Manifest?.SocialIdps != null)
            {
                @foreach (var idp in Model.Manifest.SocialIdps)
                {
                    <button type="button" class="btn btn-info d-flex align-items-center justify-content-center" @onclick="() => HandleSocialLoginButtonClick(idp.Slug)">
                        <img src="@idp.Slug-logo.png" alt="@idp.Name" class="social-logo me-2">@idp.Name
                    </button>
                }
            }
            else
            {
                <p>No social IDPs available.</p>
            }
        </div>
    </div>
    
</div>

@code {

    public class EmailModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }
    private EmailModel emailModel = new EmailModel();
    protected override void OnInitialized()
    {
        emailModel.Email = Model.Email;
    }
    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }


    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async Task HandleSocialLoginButtonClick(string slug)
    {
        // Handle the button click event here
        Console.WriteLine($"Button clicked: {slug}");
        var request = new StartExternalLoginRequest
        {
            Slug = slug,
            Directive = "login"
        };
        var response = await RageApiService.StartExternalLoginAsync(request);
        if (response != null)
        {
            Console.WriteLine($"Response: {response}");
            RedirectService.RedirectToUrl(response.RedirectUri);
        }
    }
    private async void HandleSignupClick()
    {
        // Handle the signup button click event here
        Console.WriteLine("Sign Up button clicked");
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SignUpUserName);
    }

    private async void HandleValidSubmit()
    {
        // Handle the form submission
        Model.Email = emailModel.Email;
        // Handle the next button click event here
        Console.WriteLine("Next button clicked");
        var request = new LoginPhaseOneRequest
        {
            Email = Model.Email
        };
        var response = await RageApiService.LoginPhaseOneAsync(request);

        if (response == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid username");
            return;
        }

        if (response.DirectiveDisplayPasswordPage != null)
        {
            await SetStep.InvokeAsync(OIDCPage.SigninUserNamePassword);
            return;
        }
        if (response.DirectiveStartExternalLogin != null)
        {
            var startExternalLoginResponse = await RageApiService.StartExternalLoginAsync(new StartExternalLoginRequest
            {
               Directive = "login",
               Slug = response.DirectiveStartExternalLogin.Slug

            });
            if (startExternalLoginResponse != null)
            {
                RedirectService.RedirectToUrl(startExternalLoginResponse.RedirectUri);
                return;
            }
            await ShowInfoMessage.InvokeAsync("error with external login");
            return;
        }
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
}
