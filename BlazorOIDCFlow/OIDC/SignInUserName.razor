@using System.Net

@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS
@inject IStringLocalizer<App> Localizer

<div>
    <div class="card-header">
        @Localizer["label_sign_in"]
    </div>
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleOnNext">

             <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_email_address"]" @ref="inputEmailElement" type="email" class="form-control" id="email" required @bind-value="emailModel.Email">
                    <label for="email">@Localizer["label_email_address"]</label>
                </div>
            </div>
            <!-- Wizard Buttons -->

            <div class="d-flex justify-content-between mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-link" @onclick="HandleSignupClick">
                        @Localizer["label_create_account"]
                    </button>
                </div>
                <div>
                    <button type="submit" class="btn btn-primary">@Localizer["label_next"]</button>
                </div>
            </div>
        </EditForm>
        <!-- Separator -->
        <hr />
        <!-- Paragraph -->
        <p class="text-center">@Localizer["message_or_login_with_social_provider"]</p>

        <div class="d-flex justify-content-center social-buttons">
            @if (Model?.Manifest?.SocialIdps != null)
            {
                @foreach (var idp in Model.Manifest.SocialIdps)
                {
                    <button type="button" class="btn btn-info d-flex align-items-center justify-content-center" @onclick="() => HandleSocialLoginButtonClick(idp.Slug)">
                        <img src="@idp.Slug-logo.png" alt="@idp.Name" class="social-logo me-2">@idp.Name
                    </button>
                }
            }
            else
            {
                <p>@Localizer["message_no_socials_availabel"]</p>
            }
        </div>
    </div>
    
</div>

@code {
    private ElementReference inputEmailElement;

    public class EmailModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }
    private EmailModel emailModel = new EmailModel();
    protected override void OnInitialized()
    {
        emailModel.Email = Model.Email;
        Model.Directive = Directive.Directive_Login;

    }
    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }


    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async Task HandleSocialLoginButtonClick(string slug)
    {
        // Handle the button click event here
        Console.WriteLine($"Button clicked: {slug}");
        var request = new StartExternalLoginRequest
        {
            Slug = slug,
            Directive = "login"
        };
        var wrapper = await RageApiService.StartExternalLoginAsync(request);
        if (wrapper == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("error with external login");
            return;
        }
        var response = wrapper?.Response;

        if (response != null)
        {
            Console.WriteLine($"Response: {response}");
            RedirectService.RedirectToUrl(response.RedirectUri);
        }
    }
    private async void HandleSignupClick()
    {
        // Handle the signup button click event here
        Console.WriteLine("Sign Up button clicked");
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SignUpUserName);
    }

    private async void HandleOnNext()
    {
        // Handle the form submission
        Model.Email = emailModel.Email;
        // Handle the next button click event here
        Console.WriteLine("Next button clicked");
        var request = new LoginPhaseOneRequest
        {
            Email = Model.Email
        };
        var wrapper = await RageApiService.LoginPhaseOneAsync(request);
        var response = wrapper?.Response;
        var statusCode = wrapper?.StatusCode;
        if (statusCode == HttpStatusCode.NotFound)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("user not found");
            return;
        }

        if (response == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid username");
            return;
        }

        if (response.DirectiveDisplayPasswordPage != null)
        {
            await SetStep.InvokeAsync(OIDCPage.SigninUserNamePassword);
            return;
        }
        if (response.DirectiveStartExternalLogin != null)
        {
            var wrapper2 = await RageApiService.StartExternalLoginAsync(new StartExternalLoginRequest
            {
               Directive = "login",
               Slug = response.DirectiveStartExternalLogin.Slug

            });

            if (wrapper2 == null)

            {
                // show info message
                await ShowInfoMessage.InvokeAsync("error with external login");
                return;
            }
            var startExternalLoginResponse = wrapper2.Response;

            if (startExternalLoginResponse != null)
            {
                RedirectService.RedirectToUrl(startExternalLoginResponse.RedirectUri);
                return;
            }
            await ShowInfoMessage.InvokeAsync("error with external login");
            return;
        }
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputEmailElement);
        }
    }
}
