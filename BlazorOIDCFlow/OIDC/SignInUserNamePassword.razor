@using System.Net
@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS
@inject IStringLocalizer<App> Localizer

<div>
    <div class="card-header">
        @Localizer["label_sign_in"]
    </div>
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleOnNext">
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_email_address"]" type="email" class="form-control" id="email" readonly required @bind-value="Model.Email">
                    <label for="email">@Localizer["label_email_address"]</label>
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_password"]" @ref="inputPasswordElement" type="password" class="form-control" id="password" required @bind-value="passwordModel.Password">
                    <label for="password">@Localizer["label_password"]</label>
                </div>
            </div>
            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-between mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-link" @onclick="HandleForgotPasswordClick">
                        @Localizer["label_forgot_password"]
                    </button>
                </div>
                <div>
                    <button type="button" class="btn btn-secondary me-2" @onclick="HandleBackClick">
                        @Localizer["label_back"]
                    </button>
                    <button type="submit" class="btn btn-primary">@Localizer["label_next"]</button>
                </div>
            </div>
        </EditForm>
        <!-- Separator -->
        <hr />
        <!-- Paragraph -->
        <p class="text-center">@Localizer["message_or_login_with_social_provider"]</p>

        <div class="d-flex justify-content-center social-buttons">
            @if (Model?.Manifest?.SocialIdps != null)
            {
                @foreach (var idp in Model.Manifest.SocialIdps)

                {
                    <button type="button" class="btn btn-info d-flex align-items-center justify-content-center m-1 social-btn" @onclick="() => HandleSocialLoginButtonClick(idp.Slug)">
                        <img src="@idp.Slug-logo.png" alt="@idp.Name" class="social-logo">
                        <span class="social-name d-none d-sm-inline ms-2">@idp.Name</span>
                    </button>
                }
            }
            else
            {
                <p>@Localizer["message_no_socials_availabel"]</p>
            }
        </div>
    </div>
    
</div>

@code {
    private ElementReference inputPasswordElement;

    public class PasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }
    }
    private PasswordModel passwordModel = new PasswordModel();

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }
    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async Task HandleSocialLoginButtonClick(string slug)
    {
        // Handle the button click event here
        Console.WriteLine($"Button clicked: {slug}");
        var request = new StartExternalLoginRequest
        {
            Slug = slug,
            Directive = "login"
        };
        var wrapper = await RageApiService.StartExternalLoginAsync(request);
        if (wrapper == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync(Localizer["message_unknown_error"] + ": siup:000");
            return;
        }
        var response = wrapper.Response;
        if (response != null)
        {
            Console.WriteLine($"Response: {response}");
            RedirectService.RedirectToUrl(response.RedirectUri);
        }
    }
    private async void HandleSignupClick()
    {
        // Handle the signup button click event here
        Console.WriteLine("Sign Up button clicked");
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SignUpUserName);
    }
    private void HandleForgotPasswordClick(){
        Console.WriteLine("HandleForgotPasswordClick Up button clicked");
        SetStep.InvokeAsync(OIDCPage.ForgotPassword);
    }
    private async void HandleBackClick()
    {
        // Handle the signup button click event here
        Console.WriteLine("back button clicked");
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private async void HandleOnNext()
    {
        Model.Password = passwordModel.Password;
        // Handle the next button click event here
        Console.WriteLine("Next button clicked");
        var request = new LoginPasswordRequest
        {
                Email = Model.Email,
                Password = Model.Password
        };
        var wrapper = await RageApiService.LoginPasswordAsync(request);
        if (wrapper == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync(Localizer["message_unknown_error"] + ": siup:001");
            return;
        }
        if (wrapper?.StatusCode == HttpStatusCode.Unauthorized)
        {
            await ShowInfoMessage.InvokeAsync(Localizer["message_invalid_username_or_password"]);
            return;
        }
         
        var response = wrapper.Response;
        if (response == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync(Localizer["message_unknown_error"] + ": siup:002");
            return;
        }

        if (response.DirectiveEmailCodeChallenge != null)
        {
            Model.Code = response.DirectiveEmailCodeChallenge.Code;
            await SetStep.InvokeAsync(OIDCPage.VerifyCode);

            return;
        }

        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserNamePassword);

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputPasswordElement);
        }
    }
}
    