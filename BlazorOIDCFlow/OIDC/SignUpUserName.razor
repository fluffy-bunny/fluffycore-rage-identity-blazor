@using System.Net
@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS

<div class="card">
    <div class="card-header">
        Create Account
    </div>
    <div class="card-body">
        <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="Email Address" @ref="inputEmailElement" type="email" class="form-control" id="email" required @bind-value="Model.Email">
                    <label for="email">Email Address</label>
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="Password" type="password" class="form-control" id="password" required @bind-value="Model.Password">
                        <label for="password">Password</label>
                </div>
            </div>

           
            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-end mb-3 wizard-buttons">
                <button type="button" class="btn btn-secondary me-2" @onclick="HandleBackClick">
                    Back
                </button>
                <div>
                    <button type="submit" class="btn btn-primary">Next</button>
                </div>
            </div>
        </EditForm>
        <!-- Separator -->
        <hr />
        <!-- Paragraph -->
        <p class="text-center">or create an account with a social provider</p>

        <div class="d-flex justify-content-center social-buttons">
            @if (Model?.Manifest?.SocialIdps != null)
            {
                @foreach (var idp in Model.Manifest.SocialIdps)

                {
                    <button type="button" class="btn btn-info d-flex align-items-center justify-content-center" 
                    @onclick="() => HandleSocialLoginButtonClick(idp.Slug)">
                        <img src="@idp.Slug-logo.png" alt="@idp.Name" class="social-logo me-2">@idp.Name
                    </button>
                }
            }
            else
            {
                <p>No social IDPs available.</p>
            }
        </div>
    </div> 
</div>

@code {
    private ElementReference inputEmailElement;

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }
    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [CascadingParameter]
    public OIDCModel Model { get; set; }



    private void HandleSocialLoginButtonClick(string slug)

    {
        // Handle the button click event here
        Console.WriteLine($"Button clicked: {slug}");
    }
    private async void HandleSigninClick()
    {
        // Handle the signup button click event here
        Console.WriteLine("SigninUserName button clicked");
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private void HandleForgotPasswordClick(){
        Console.WriteLine("HandleForgotPasswordClick Up button clicked");
    }
    private async void HandleBackClick()
    {
        // Handle the signup button click event here
        Console.WriteLine("back button clicked");
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private async void HandleValidSubmit()
    {
        // Handle the next button click event here
        Console.WriteLine("Next button clicked");
        var request = new SignupRequest
        {
            Email = Model.Email,
            Password = Model.Password
        };
        var wrapper = await RageApiService.SignupRequestAsync(request);
        if (wrapper == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Error signing up");
            return;
        }
        var statusCode = wrapper.StatusCode;
        var response = wrapper.Response;
        switch (statusCode)
        {
            case HttpStatusCode.Found:
                await ShowInfoMessage.InvokeAsync("User already exists");
                await SetStep.InvokeAsync(OIDCPage.SigninUserName);
                return;
            case HttpStatusCode.OK:
                await SetStep.InvokeAsync(OIDCPage.SigninUserName);
                return;
        }
       
        if (response != null)
        {

            switch (response?.ErrorReason)
            {
                case SignupErrorReason.SignupErrorReason_NoError:
                    await SetStep.InvokeAsync(OIDCPage.SigninUserName);
                    return;
                case SignupErrorReason.SignupErrorReason_InvalidPassword:
                    await ShowInfoMessage.InvokeAsync("Invalid password.  Make it stronger");
                    break;

                case SignupErrorReason.SignupErrorReason_UserAlreadyExists:
                    await ShowInfoMessage.InvokeAsync("User already exists");
                    await SetStep.InvokeAsync(OIDCPage.SigninUserName);
                    return;
                default:
                    await ShowInfoMessage.InvokeAsync("Error signing up");
                    break;
            }
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputEmailElement);
        }
    }
}
