@using System.Net
@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS
@inject IStringLocalizer<App> Localizer

<div>
    <div class="card-header">
        @Localizer["label_password_reset"]
    </div>
    <div class="card-body">
        <p>@string.Format(Localizer["message_reset_password"], Model.Email)</p>

         <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_password"]" @ref="inputPasswordElement" type="password" class="form-control" id="password" required @bind-value="resetPasswordModel.Password">
                    <label for="password">Enter @Localizer["label_password"]</label>
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_confirm_password"]" type="password" class="form-control" id="password_confirm" required @bind-value="resetPasswordModel.PasswordConfirm">
                    <label for="password_confirm">@Localizer["label_confirm_password"]</label>
                </div>
            </div>
            
            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-end mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-secondary me-2" @onclick="HandleCancelClick">
                        @Localizer["label_back"]
                    </button>
                    <button type="submit" class="btn btn-primary">@Localizer["label_next"]</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    private ElementReference inputPasswordElement;

    public class ResetPasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string PasswordConfirm { get; set; }

    }
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();



    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }


    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async void HandleCancelClick(){
        // Handle the cancel button click event here
        Console.WriteLine("Cancel button clicked");
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private async void HandleValidSubmit()
    {
        // Handle the next button click event here
        Console.WriteLine("HandleValidSubmit clicked");
        var request = new PasswordResetFinishRequest
        {
           Password = resetPasswordModel.Password,
           PasswordConfirm = resetPasswordModel.PasswordConfirm,
        };
        var wrapper = await RageApiService.PasswordResetFinishAsync(request);
        if (wrapper == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync(Localizer["message_unknown_error"] + ": rpw:000");
        }
        var statusCode = wrapper.StatusCode;
        var response = wrapper.Response;
        switch (statusCode)
        {
            case HttpStatusCode.OK:
                await SetStep.InvokeAsync(OIDCPage.SigninUserName);
                return;
            case HttpStatusCode.BadRequest:
                var message = Localizer["message_unknown_error"] + ": rpw:001";
                switch (response.ErrorReason)
                {
                    case PasswordResetErrorReason.PasswordResetErrorReason_InvalidPassword:
                        message = Localizer["message_invalid_password"];
                        break;
                    case PasswordResetErrorReason.PasswordResetErrorReason_PasswordsDoNotMatch:
                        message = Localizer["message_password_mismatch"];
                        break;
                }
                
                await ShowInfoMessage.InvokeAsync(message);
                return;
            default:
                await SetStep.InvokeAsync(OIDCPage.SigninUserName);
                return;
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputPasswordElement);
        }
    }
}
