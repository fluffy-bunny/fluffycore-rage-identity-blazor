@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS

<div class="card">
    <div class="card-header">
        Password Reset
    </div>
    <div class="card-body">
        <p>Reset the password for the @Model.Email account.</p>
        <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="Password" @ref="inputPasswordElement" type="password" class="form-control" id="password" required @bind-value="resetPasswordModel.Password">
                    <label for="password">Enter Password</label>
                </div>
            </div>
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="Confirm Password" type="password" class="form-control" id="password_confirm" required @bind-value="resetPasswordModel.PasswordConfirm">
                    <label for="password_confirm">Confirm Password</label>
                </div>
            </div>
            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-end mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-secondary me-2" @onclick="HandleCancelClick">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary">Next</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    private ElementReference inputPasswordElement;

    public class ResetPasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; }

        [Required]
        [DataType(DataType.Password)]
        public string PasswordConfirm { get; set; }

    }
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();

   

    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }


    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async void HandleCancelClick(){
        // Handle the cancel button click event here
        Console.WriteLine("Cancel button clicked");
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private async void HandleValidSubmit()
    {
        // Handle the next button click event here
        Console.WriteLine("HandleValidSubmit clicked");
        var request = new PasswordResetFinishRequest
        {
           Password = resetPasswordModel.Password,
           PasswordConfirm = resetPasswordModel.PasswordConfirm,
        };
        var response = await RageApiService.PasswordResetFinishAsync(request);
        if (response == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Unknown Error");
        }

        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputPasswordElement);
        }
    }
}
