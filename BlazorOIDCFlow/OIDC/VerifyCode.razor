@using System.Net
@inject IRageApiService RageApiService
@inject RedirectService RedirectService
@inject IJSRuntime JS
@inject IStringLocalizer<App> Localizer

<div>
    <div class="card-header">
        @Localizer["label_verify_code"]
    </div>
    <div class="card-body">
        <p>@string.Format(Localizer["message_verify_code"], verifyCodeModel.Email)</p>
        <EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
            <div class="form-group mb-3">
                <div class="form-floating">
                    <input placeholder="@Localizer["label_enter_code"]" @ref="inputCodeElement" type="text" class="form-control" id="code" required @bind-value="verifyCodeModel.Code">
                    <label for="code">@Localizer["label_enter_code"]</label>
                </div>
            </div>
            
            <!-- Wizard Buttons -->
            <div class="d-flex justify-content-end mb-3 wizard-buttons">
                <div>
                    <button type="button" class="btn btn-secondary me-2" @onclick="HandleCancelClick">
                        @Localizer["label_back"]
                    </button>
                    <button type="submit" class="btn btn-primary">@Localizer["label_next"]</button>
                </div>
            </div>

        </EditForm>
    </div>
</div>

@code {
    private ElementReference inputCodeElement;

    public class VerifyCodeModel
    {
        [Required]
        public string Code { get; set; }

        public string Email { get; set; }
    }
    private VerifyCodeModel verifyCodeModel = new VerifyCodeModel();

    

    protected override async Task OnInitializedAsync()
    {
        var wrappedResponse = await RageApiService.GetVerifyCodeBeginAsync();
        var verifyCodeBeginResponse = wrappedResponse?.Response;
        if (verifyCodeBeginResponse == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid verification code state");
            return;
        }
        verifyCodeModel.Code = verifyCodeBeginResponse.Code;
        verifyCodeModel.Email = verifyCodeBeginResponse.Email;
    }


    [Parameter]
    public EventCallback<OIDCPage> SetStep { get; set; }

    [Parameter]
    public EventCallback<string> ShowInfoMessage { get; set; }


    [CascadingParameter]
    public OIDCModel Model { get; set; }

    private async void HandleCancelClick(){
        // Handle the cancel button click event here
        Console.WriteLine("Cancel button clicked");
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }
    private async void HandleValidSubmit()
    {
        
        // Handle the next button click event here
        Console.WriteLine("Next button clicked");
        var request = new VerifyCodeRequest
        {
                Code = verifyCodeModel.Code
        };
        var wrapper = await RageApiService.VerifyCodeAsync(request);
        if (wrapper == null){
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid code");
            return;
        }
        var statusCode = wrapper.StatusCode;
        if (statusCode == HttpStatusCode.NotFound){
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid code");
            return;
        }
        
        var response = wrapper.Response;
        if (response == null)
        {
            // show info message
            await ShowInfoMessage.InvokeAsync("Invalid code");
            return;
        }
        if (Model.Directive == Directive.Directive_ResetPassword)
        {
            await SetStep.InvokeAsync(OIDCPage.ResetPassword);
            return;
        }
        if (response.DirectiveRedirect != null)
        {
            RedirectService.RedirectToUrl(response.DirectiveRedirect.RedirectURI);
            return;
        }
        // Call SetStep with the desired step value
        await SetStep.InvokeAsync(OIDCPage.SigninUserName);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("setFocus", inputCodeElement);
        }
    }
}
